#Использовать yadisk
#Использовать logos
#Использовать cmdline

Перем мЛог;

Процедура ВыполнитьРаботу()

	Если АргументыКоманднойСтроки.Количество() = 0 Тогда
		ВывестиСправку();
		ЗавершитьРаботу(0);
	КонецЕсли;

	мЛог = Логирование.ПолучитьЛог("oscript.yadisk.uploader");
	мЛог.УстановитьУровень(УровниЛога.Предупреждение);

    мЛог.ДобавитьСпособВывода(ПолучитьФайлЖурнала());

	ПарсерКомСтроки = Новый ПарсерАргументовКоманднойСтроки();
	ПарсерКомСтроки.ДобавитьПараметрФлаг("-publish", "сделать файл публичным и вывести в консоль публичную ссылку на файл");
	ПарсерКомСтроки.ДобавитьПараметрФлаг("-debug", "выводить отладочную информацию");
	ПарсерКомСтроки.ДобавитьПараметр("ПутьКПараметрам", "путь к файлу на вашем компьютере, в котором прописаны пути");
	
	Параметры = ПарсерКомСтроки.Разобрать(АргументыКоманднойСтроки);

	Если ПустаяСтрока(Параметры["ПутьКПараметрам"]) Тогда
		Сообщить("Не указаны параметры!");
		ВывестиСправку();
		ЗавершитьРаботуСкрипта(1);
	КонецЕсли;
	
	ФайлСПараметрами = Новый Файл(Параметры["ПутьКПараметрам"]);
	
	Если НЕ ФайлСПараметрами.Существует() Тогда
		мЛог.Ошибка(СтрШаблон("Файл %1 не найден!", Параметры["ПутьКПараметрам"]));
		Сообщить(СтрШаблон("Файл %1 не найден!", Параметры["ПутьКПараметрам"]));
		ЗавершитьРаботуСкрипта(1);
	КонецЕсли;
	    
	Если Параметры["-debug"] Тогда
		мЛог.УстановитьУровень(УровниЛога.Отладка);
	КонецЕсли;

	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(Параметры["ПутьКПараметрам"]);
	ТекстФайла = СокрЛП(ТекстДок.ПолучитьТекст());
	
	МассивПараметров = СтрРазделить(ТекстФайла, "<Забекапить>",Ложь);
	
	Для Каждого Элемент Из МассивПараметров Цикл

		Если СтрЧислоСтрок(Элемент) < 4 Тогда
			мЛог.Ошибка(СтрШаблон("В файл записаны не все параметры!", Параметры["ПутьКПараметрам"]));	
			Сообщить("В файл parameters.txt записаны не все параметры");
			ЗавершитьРаботуСкрипта(1);
		КонецЕсли;
	 
		ПутьКФайлу         = СтрПолучитьСтроку(СокрЛП(Элемент),1);
		ПутьКАрхиву        = СтрПолучитьСтроку(СокрЛП(Элемент),2);
		ПутьКФайлуНаДиске  = СтрПолучитьСтроку(СокрЛП(Элемент),3);
		МаксКолАрхивов     = СтрПолучитьСтроку(СокрЛП(Элемент),4);
		
		РабочаяПапкаДиска  = ВернутьРабочуюПапкуДиска(ПутьКФайлуНаДиске);
		
		ИмяБекапа = Лев(СтрЗаменить(ТекущаяДата(),".",""),8)+"_"+Лев(Прав(СтрЗаменить(СтрЗаменить(ТекущаяДата(),":","")," ","0"),6),4)+".zip";
		//ПутьКАрхиву = ПутьКАрхиву+"\"+ИмяБекапа;
		
		ПутьКАрхиву = СохранениеАрхивов(ПутьКФайлу+"\1Cv8.1CD",ПутьКАрхиву,ИмяБекапа);		   
		
		ПроверкаПапкиНаДиске(ПутьКФайлуНаДиске);
		
		СвойстваПапкиДиска = ПолучитьСвойстваПапкиДиска(ПутьКФайлуНаДиске);
		КоличествоАрхивовНаДиске = СвойстваПапкиДиска._embedded.total;
		
		Если Число(МаксКолАрхивов) <= Число(КоличествоАрхивовНаДиске) Тогда
			КоличествоУдаляемых = КоличествоАрхивовНаДиске - МаксКолАрхивов +1;
			ОтобратьРанниеАрхивыНаДиске(КоличествоУдаляемых,СвойстваПапкиДиска._embedded);
		КонецЕсли;		
		ОчисткаКорзины();
		ЗагрузитьФайлНаЯндексДиск(ПутьКАрхиву, РабочаяПапкаДиска+"/"+ИмяБекапа);
	
	КонецЦикла;

	мЛог.Закрыть();

КонецПроцедуры

Процедура ВывестиСправку()
	Сообщить(
		"Использование: oscript yadisk-uploader.os [-debug|-d] path/to/parameters
		|	path/to/parameters      путь файлу с параметрами    parameters.txt
		|	-debug, -d 		вывести отладочную информацию"
	);
КонецПроцедуры

Процедура ЗагрузитьФайлНаЯндексДиск(ПутьКФайлу, ПутьКФайлуНаДиске)

	ЯндексДиск = Новый ЯндексДиск;
	ЯндексДиск.УстановитьРежимОтладки(мЛог.Уровень() = УровниЛога.Отладка);

    ПутьКФайлуНаДиске = "app:/" + ПутьКФайлуНаДиске; 
	 
    ЯндексДиск.УстановитьТокенАвторизации(ПолучитьТокенАвторизации());
	ЯндексДиск.ЗагрузитьНаДиск(ПутьКФайлу, ПутьКФайлуНаДиске);
	 
КонецПроцедуры

Функция ПолучитьПеременнуюСреды(ИмяПеременной)
    СистемнаяИнформация = Новый СистемнаяИнформация;
    Возврат СистемнаяИнформация.ПолучитьПеременнуюСреды(ИмяПеременной);
КонецФункции

Функция ПолучитьТокенАвторизации()
	ПутьКФайлуСТокеном = ОбъединитьПути(Новый Файл(ТекущийСценарий().Источник).Путь, "oauth_token.txt");
	Если (Новый Файл(ПутьКФайлуСТокеном)).Существует() Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуСТокеном);
		Токен = СокрЛП(ЧтениеТекста.Прочитать());
		ЧтениеТекста.Закрыть();
		мЛог.Отладка("Токен получен из файла " + ПутьКФайлуСТокеном);
	КонецЕсли;
	Если ПустаяСтрока(Токен) Тогда
		мЛог.Предупреждение("Не найден токен авторизации!");
		мЛог.Информация("Токен авторизации необходимо расположить в файле oauth_token.txt в папке скрипта yadisk-uploader.os");
		мЛог.Отладка("Не найден токен авторизации: " + ПутьКФайлуСТокеном);
		ЗавершитьРаботуСкрипта(1);
	КонецЕсли;
	Возврат Токен;
КонецФункции

Процедура ЗавершитьРаботуСкрипта(КодВозврата)
	мЛог.Закрыть();
	ЗавершитьРаботу(КодВозврата);
КонецПроцедуры

Функция ПолучитьФайлЖурнала()

	ПутьКЛогу = ОбъединитьПути(ТекущийСценарий().Каталог, "uploader.log");

	ФайлЖурнала = Новый ВыводЛогаВФайл;
	ФайлЖурнала.ОткрытьФайл(ПутьКЛогу);
	
	Возврат ФайлЖурнала;

КонецФункции

Функция ПолучитьСвойстваПапкиДиска(ПутьКФайлуНаДиске)

	ЯндексДиск = Новый ЯндексДиск;
	ЯндексДиск.УстановитьРежимОтладки(мЛог.Уровень() = УровниЛога.Отладка);
	ЯндексДиск.УстановитьТокенАвторизации(ПолучитьТокенАвторизации());
	Попытка
		Возврат ЯндексДиск.ПолучитьСвойстваРесурса(ПутьКФайлуНаДиске, Неопределено);	
	Исключение
		мЛог.Предупреждение("Не получены свойства папки яндекс диска " + ПутьКФайлуНаДиске);
		мЛог.Информация("Не получены свойства папки яндекс диска " + ПутьКФайлуНаДиске);
		мЛог.Отладка("Не получены свойства папки яндекс диска " + ПутьКФайлуНаДиске);
		ЗавершитьРаботуСкрипта(1);
	КонецПопытки;
	
КонецФункции

Процедура ОтобратьРанниеАрхивыНаДиске(КоличествоУдаляемых,СвойстваПапкиДиска)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ДатаСоздания",,"ДатаСоздания");
	ТЗ.Колонки.Добавить("Путь",,"Путь");
	Для каждого Элемент Из СвойстваПапкиДиска.items Цикл
		//Сообщить(Дата(Элемент.created));
		ДатаЭлемента = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(Лев(Элемент.created,19),"-",""),"T",""),":",""));		
		Стр = ТЗ.Добавить();
		Стр.ДатаСоздания = ДатаЭлемента;
		Стр.Путь = Элемент.path;
	КонецЦикла;
	ТЗ.Сортировать("ДатаСоздания");
	
	Пока КоличествоУдаляемых > 0 Цикл
	   УдалитьИзДиска(ТЗ[КоличествоУдаляемых-1].Путь);
	   КоличествоУдаляемых = КоличествоУдаляемых - 1;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура УдалитьИзДиска(Путь)
   	ЯндексДиск = Новый ЯндексДиск;
   	ЯндексДиск.УстановитьРежимОтладки(мЛог.Уровень() = УровниЛога.Отладка);
   	ЯндексДиск.УстановитьТокенАвторизации(ПолучитьТокенАвторизации());
	Попытка   	
		ЯндексДиск.Удалить(Путь,Ложь,Истина);
	Исключение
		мЛог.Предупреждение("Не удалось удалить файл " + Путь);
		мЛог.Информация("Не удалось удалить файл " + Путь);
		мЛог.Отладка("Не удалось удалить файл " + Путь);
		ЗавершитьРаботуСкрипта(1);
	КонецПопытки;
КонецПроцедуры

Функция СохранениеАрхивов(ПутьКФайлу,ПутьКАрхиву,ИмяБекапа);
	
	КоличествоЕжедневныхАрхивов = 7;
	КоличествоЕженедельныхАрхивов = 52;	
	
	//
	//Работа с локальными архивами
	//
	Если НайтиФайлы(ПутьКАрхиву, "ЕжедневныйАрхив", Ложь).Количество() = 0 Тогда
		СоздатьКаталог(ПутьКАрхиву + "\ЕжедневныйАрхив");
	КонецЕсли;
	Если НайтиФайлы(ПутьКАрхиву, "ЕженедельныйАрхив", Ложь).Количество() = 0 Тогда
		СоздатьКаталог(ПутьКАрхиву + "\ЕженедельныйАрхив");
	КонецЕсли;
	//
	//Работа с ежедневными локальными архивами
	//
	//Сохранение ежедневного архива		
	ZipПуть = ПутьКАрхиву + "\ЕжедневныйАрхив\" + ИмяБекапа;
	//ZipПароль = "2016";
	ZipКомментарий = "The files created by the program BP_Backup";
	УровеньСжатия = УровеньСжатияZIP.Максимальный;
	ЗаписьZIP =  Новый ЗаписьZipФайла(); 
	ЗаписьZIP.Открыть(ZipПуть,,ZipКомментарий,,УровеньСжатия);	
    ЗаписьZIP.Добавить(ПутьКФайлу);
    ЗаписьZIP.Записать();

	//удаление старых ежедневных архивов
	ЛокальныйМассивАрхивов = НайтиФайлы(ПутьКАрхиву + "\ЕжедневныйАрхив\", "*.zip", Ложь);
	Если ЛокальныйМассивАрхивов.Количество() >= КоличествоЕжедневныхАрхивов Тогда
		КоличествоУдаляемых = ЛокальныйМассивАрхивов.Количество() - КоличествоЕжедневныхАрхивов;
		ОтобратьЛокальныеРанниеАрхивы(ЛокальныйМассивАрхивов,КоличествоУдаляемых);
	КонецЕсли;
	
	//
	//Работа с еженедельными локальными архивами
	//
	//Сохранение еженедельного архива	
	Если ДеньНедели(ТекущаяДата()) = 1 Тогда
		КопироватьФайл(ПутьКАрхиву + "\ЕжедневныйАрхив\" + ИмяБекапа, ПутьКАрхиву + "\ЕженедельныйАрхив\" + ИмяБекапа);
	КонецЕсли;
	//удаление старых еженедельных архивов
	ЛокальныйМассивАрхивов = НайтиФайлы(ПутьКАрхиву + "\ЕженедельныйАрхив\", "*.zip", Ложь);
	Если ЛокальныйМассивАрхивов.Количество() >= КоличествоЕженедельныхАрхивов Тогда
		КоличествоУдаляемых = ЛокальныйМассивАрхивов.Количество() - КоличествоЕженедельныхАрхивов;
		ОтобратьЛокальныеРанниеАрхивы(ЛокальныйМассивАрхивов,КоличествоУдаляемых);
	КонецЕсли;
	
	Возврат ПутьКАрхиву + "\ЕжедневныйАрхив\" + ИмяБекапа;

КонецФункции

Процедура ОтобратьЛокальныеРанниеАрхивы(ЛокальныйМассивАрхивов,КоличествоУдаляемых)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ДатаСоздания",,"ДатаСоздания");
	ТЗ.Колонки.Добавить("Имя",,"Имя");
	ТЗ.Колонки.Добавить("Путь",,"Путь");
	Для каждого Элемент Из ЛокальныйМассивАрхивов Цикл	
		Стр              = ТЗ.Добавить();
		Стр.ДатаСоздания = Элемент.ПолучитьВремяИзменения();
		Стр.Имя          = Элемент.Имя;
		Стр.Путь         = Элемент.Путь;
	КонецЦикла;
	ТЗ.Сортировать("ДатаСоздания");
	
	Пока КоличествоУдаляемых > 0 Цикл
		Путь         = ТЗ[КоличествоУдаляемых-1].Путь;
		Имя          = ТЗ[КоличествоУдаляемых-1].Имя;
		ДатаСоздания = ТЗ[КоличествоУдаляемых-1].ДатаСоздания;
		//Перед удалением проверяем, нужно ли архив оставить в папке еженедельных архивов
		СохранениеЕженедельныхАрхивов(Путь,Имя,ДатаСоздания);
		
		УдалитьФайлы(Путь,Имя);
	    КоличествоУдаляемых = КоличествоУдаляемых - 1;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаПапкиНаДиске(ПутьКФайлуНаДиске)
 
	РабочаяПапкаНеСоздана = Истина;
	РабочаяПапкаДиска  = ВернутьРабочуюПапкуДиска(ПутьКФайлуНаДиске);
	СвойстваПапкиДиска = ПолучитьСвойстваПапкиДиска(СтрЗаменить(ПутьКФайлуНаДиске,"/"+РабочаяПапкаДиска,""));
	Для Каждого Элемент Из СвойстваПапкиДиска._embedded.items Цикл
		Если СтрЗаменить(Элемент.path,"disk:/","") = ПутьКФайлуНаДиске  Тогда
			РабочаяПапкаНеСоздана = Ложь;	
		КонецЕсли;
	КонецЦикла;
	
	Если РабочаяПапкаНеСоздана Тогда
		//Создаем папку
	   	ЯндексДиск = Новый ЯндексДиск;
	   	ЯндексДиск.УстановитьРежимОтладки(мЛог.Уровень() = УровниЛога.Отладка);
	   	ЯндексДиск.УстановитьТокенАвторизации(ПолучитьТокенАвторизации());
		Попытка
			ЯндексДиск.СоздатьПапку(ПутьКФайлуНаДиске); 
		Исключение
			мЛог.Предупреждение("Не удалось создать папку " + ПутьКФайлуНаДиске);
			мЛог.Информация("Не удалось создать папку " + ПутьКФайлуНаДиске);
			мЛог.Отладка("Не удалось создать папку " + ПутьКФайлуНаДиске);
			ЗавершитьРаботуСкрипта(1);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьРабочуюПапкуДиска(ПутьКФайлуНаДиске)
	ИерархияПапокДиска = СтрРазделить(ПутьКФайлуНаДиске, "/",Ложь);
	Возврат ИерархияПапокДиска[ИерархияПапокДиска.ВГраница()];
КонецФункции

Процедура СохранениеЕженедельныхАрхивов(Путь,Имя,ДатаСоздания)
	
	Если ДеньНедели(ДатаСоздания) = 1 Тогда
		ПутьИсточник = Путь + Имя;
		ПутьПриемник = СтрЗаменить(Путь,"ЕжедневныйАрхив","ЕженедельныйАрхив") + Имя;
		КопироватьФайл(ПутьИсточник,ПутьПриемник);
	КонецЕсли;
КонецПроцедуры

Процедура ОчисткаКорзины()
   	ЯндексДиск = Новый ЯндексДиск;
   	ЯндексДиск.УстановитьРежимОтладки(мЛог.Уровень() = УровниЛога.Отладка);
   	ЯндексДиск.УстановитьТокенАвторизации(ПолучитьТокенАвторизации());
	Попытка   	
		ЯндексДиск.ОчиститьКорзину("", Истина);
	Исключение
		мЛог.Предупреждение("Не удалось очистить корзину");
		мЛог.Информация("Не удалось очистить корзину");
		мЛог.Отладка("Не удалось очистить корзину");
		ЗавершитьРаботуСкрипта(1);
	КонецПопытки;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////

ВыполнитьРаботу();